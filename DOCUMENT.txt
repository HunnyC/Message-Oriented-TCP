Final Submission Report 
(21CS30024, 21CS30040)
---------------------------------
/////////////////////////////////////////
Overview 
----------------------------
The final submission of our assignment involves the implementation of all functionalities for the Message Transfer Protocol (MTP) socket. We have implemented all of the functions - m_socket, m_bind, m_close(), m_sendto() and m_recvfrom(). The m_sendto() and m_recvfrom() calls use sliding window flow control for reliable communication. We also implemented a dropmessege() function and a garbage collector process.
-----------------------------------
//////////////////////////////////////////////////
Results
---------------------
	p	ratio	transmission.cnt.	packet.cnt
---------------------------------------------------------------
   0.015     |  1.081   |	120	|	111		
    0.25     |	1.405	|	156	|	111
     0.5     |	1.93	|	215	|	111
---------------------------------------------------------------
//////////////////////////////////////////////////
-----------------------------------
Implemented Functions 
-------------------------------------
------------------------------------
1. m_socket :
------------
------------
Functionality: 

Creates an MTP socket and initializes necessary data structures. Actually this function opens an UDP socket by the shared_info (of type SOCK_INFO) data-structure by setting the required fields. This checks whether a free entry is available in the SM (Shared Memory), creates the corresponding UDP socket if a free entry is available and initializes SM with corresponding entries. If no free entry is available, it returns -1 with the global error variable set to ENOBUFS. If any error is received while creating the UDP socket, errno is set to the corresponding error.

------------------
Parameters: 

domain: Specifies the communication domain; for MTP, typically AF_INET. 
type: Specifies the socket type; for MTP, predefined macro SOCK_MTP. 
protocol: Specifies the flag.

---------------------------
Implementation Details: 

Shared Memory: Used to store socket information and state. 

Semaphores: Employed for synchronization during socket creation and access to shared memory. 

Synchronization Mechanism: Ensured exclusive access to shared memory segments using semaphores. Semaphore operations (sem_wait, sem_post) were used to synchronize critical sections where multiple processes/threads could access shared data simultaneously.
--------------------
--------------------
2. m_bind :
---------------------
---------------------
Functionality: 


Binds an MTP socket to another specific MTP socket.This function takes the source IP, the source port, the destination IP and the
destination port. It binds the UDP socket with the source IP and source port, and updates the corresponding SM (Shared Memory) with the destination IP and destination port. If any error is received while binding the UDP socket, errno is set to the corresponding error, and SM is not updated.

---------------------

Parameters: 


sockfd: The socket descriptor returned by m_socket.
src_addr: The source IP address to bind to. 
src_port: The source port to bind to. 
dest_addr: The destination IP address to bind to. 
dest_port: The destination port to bind to. 

---------------------

Implementation Details: 


Shared Memory: Utilized for storing socket binding information. 
Semaphores: Used to synchronize access to shared memory segments. 
Synchronization Mechanism: Ensured mutual exclusion while updating socket binding information using semaphores. Semaphore operations were used to acquire and release locks to prevent concurrent modifications to shared data.

---------------------
---------------------
3. m_close :
---------------------
---------------------
Functionality: Closes an MTP socket and releases associated resources.
---------------------
 
Parameters: 

sockfd: The socket descriptor of the socket to be closed.
---------------------
 
Implementation Details: 

Shared Memory: Accessed to reset socket states and release resources. 
Semaphores: Used for synchronization during socket closure. Synchronization Mechanism: Ensured exclusive access to shared memory segments using semaphores. Semaphore operations were employed to synchronize socket closure operations and avoid conflicts with other socket operations. 

---------------------
---------------------
4. m_sendto :
---------------------
---------------------
This function writes the message to the sender side message buffer if the destination IP/Port matches with the bounded IP/Port as set through m_bind() (by iterating through all the MTP sockets). If not, it drops the message, returns -1 and sets the global error variable to ENOTBOUND. If there is no space is the send buffer, return -1 and set the global error variable to ENOBUFS. So the m_sendto() call is non-blocking. It takes the message from the user buffer and adds MTP header to it (additional sequence number and identifier for data message or ack message). It also updates the necessary pointers (indexes) of the send buffer and the count of current messages in the send buffer.

-----------------------------

Parameters: 

sockfd: The socket descriptor returned by m_socket. 
buf: Pointer to the data buffer containing the message to be sent. 
len: Length of the message in bytes.  
---------------------

Implementation Details: 

Semaphores: Employed for synchronization and mutual exclusion in using shared memory.
Synchronization Mechanism: Implemented sliding-window control using two pointers (integers) to the buffer and two pointers (these are also pointing buffer location) representing the sender window. This function writes those messages in the send buffer which have their sequence number within the seder window. The sender window slides on the buffer.

---------------------
---------------------
5. m_recvfrom :
---------------------
---------------------
This function looks up the receiver-side message buffer to see if any message isalready received. If yes, it returns the first message and deletes that message from the table. If not, it returns with -1 and sets a global error variable to ENOMSG, indicating no message has been available in the message buffer. So the m_recvfrom call is non-blocking. This function ensures that messages are received in order. After receiving the message from the receive buffer and deleting it from there it increases the left pointer (integer) of the receive buffer, decreases the count of messages in the receive buffer by 1, increases the receive windowâ€™s size and right pointer by 1.
---------------------

Parameters: 

sockfd: The socket descriptor returned by m_socket. 
buf: Pointer to the data buffer containing the message to be sent. 
len: Length of the message in bytes. 
---------------------

Implementation Details:
 
Semaphores: Employed for synchronization and mutual exclusion in using shared memory.
Synchronization Mechanism: Implemented sliding-window control using two pointers (integers) to the buffer and two pointers (these are also pointing buffer location) representing the sender window. This function reads the processes from the receive buffer in order with proper synchronization and is unaware of any out of order message. This function helps to slide the left end of the receive window.
------------------------------------------------------------------------------------


///////////////////////////////////////////////////
Defined Structures and their uses
---------------------
---------------------
SOCK_INFO: 
---------------------
------------------------------------------

Purpose:

	 Represents temporary information about a socket. This is used in m_socket() and  m_bind() calls to hold values in its fields which are used in the initmsocket.c file to implement the actual functionality of these function calls and after the implementation is done the values are updated to be reused in the msocket.c file to store in the actual shared memory of the corresponding MTP socket. Mutual Exclusion is properly handled using semaphores.
------------------------------------------

Fields: 

sock_id: Integer representing the socket ID. 
IP: Array of characters representing the IP address. 
port: Integer representing the port number. 
errorno: Integer representing any error number associated with the socket.

---------------------
---------------------
MTPSocket:
---------------------
------------------------------------------ 
Purpose: 
	
	Represents shared memory data structure for the MTP (Message Transfer Protocol)sockets. These contain all the information about the sockets (corresponding UDP socket, source and destination IP and port, buffer informations, window informations etc) and are used extensively in all functions for implementing the functionality of the MTP sockets. Proper mutual exclusion and synchronization is established by the use of semaphores and thread mutexes (between threads).
------------------------------------------
	
Fields:
 
free: Boolean indicating whether the socket is free or in use. 
pid: Process ID of the process that owns the socket. 
UDPsocID: file descriptor of the corresponding UDP socket. 
des_IP: Array of characters representing the destination IP address. 
nospace: Boolean indicating if there is no space in the receive buffer. 
sendNospace: Boolean indicating if there is no space in the send buffer. 
des_port: Integer representing the destination port for sending messages. 
sbuf: 2D array representing the send buffer for holding messages waiting to be sent. 
rbuf: 2D array representing the receive buffer for holding received messages. 
source_IP: Array of characters representing the source IP address. 
current_send: Integer representing the current size of the send buffer. 
source_port: Integer representing the source port. 
l_send: Integer representing the index of the slot where the next message will be written in the send buffer. 
f_send: Integer representing the index of the slot from where the next message will be read in the send buffer. 
seq_num: Integer representing the 4 bit sequence number for received messages.
f_receive: Integer representing the index of the slot where the next message will be written in the receive buffer. 
l_receive: Integer representing the index of the slot from where the next message will be read in the send buffer. 
current_receive: Integer representing the current size of the receive buffer.
left_swnd: left pointer of the sender window
right_swnd: right pointer of the sender window
left_rwnd: left pointer of the receiver window 
right_rwnd: right pointer of the receiver window
left_seq: sequence number of the last in order message in the receive buffer.
curr_size_swnd: current size of send window
curr_size_rwnd: current size of receive window

DATA STRUCTURE FOR SEND WINDOW AND RECV WINDOW
SEND WINDOW -> TAKING left_swnd ,right_swnd and curr_siz_swnd 
RECV WINDOW -> TAKING left_rwnd ,right_swnd and curr_siz_swnd

/////////////////////////////////////////////////////////////////////
Design Considerations 
------------------------------------------
Utilized shared memory segments and semaphores for inter-process communication, mutual exclusion and synchronization. Thread mutexes are used for mutual exclusion between R and S thread.
Ensured proper error handling and cleanup mechanisms for shared memory. 
Reliability is ensured despite being a message oriented protocol. 


Brief description of msocket.c as per updated instructions
m_socket and m_bind

1. Create a shared memory structure SOCK_INFO with the following fields: sock_id, IP, port,, errno. All are initialized to 0.
2. Create 2 semaphores Sem1 and Sem2. Both are initialized to 0.
3. The main thread, after creating S and R and doing everything else, does the following:
(a) wait on Sem1
(b) On being signaled, look at SOCK_INFO.
(c) If all fields are 0, it is a m_socket call. Create a UDP socket. Put the socket id returned in the sock_id field of SOCK_INFO.  If error, put -1 in sock_id field and errno in errno field. Signal on Sem2.
(d) if sock_id, IP, and port are non-zero, it is a m_bind call. Make a bind() call on the sock_id value, with the IP and port given. If error, reset sock_id to -1 in the structure and put errno in errno field. Signal on Sem2.
(e) Go back to wait on Sem1

m_socket call:
Looks at SM to find a free entry as usual. Then signals on Sem1 and then waits on Sem2. On being woken, checks sock_id field of SOCK_INFO. If -1, return error and set errno correctly. If not, put UDP socket id returned in that field in SM table (same as if m_socket called socket()) and return the index in SM table as usual. In both cases, reset all fields of SOCK_INFO to 0.


m_bind call:
Find the corresponding actual UDP socket id from the SM table. Put the UDP socket ID, IP, and port in SOCK_INFO table. Signal Sem1. Then wait on Sem2. On being woken, checks sock_id field of SOCK_INFO. If -1, return error and set errno correctly. If not return success.
In both cases, reset all fields of SOCK_INFO to 0.





In init :
Garbage collector thread :
Find close socket process waiting till its send become empty then closing it
Thread S:
Sending messages which in b/w left and right of sendwindow 
updating right window as per size of window
left window pointer changes in ack

Thread R 
Select call on present sockets 
Receive or drop 
on Receive checking header 
receiving message then sending ack acc to case of inorder ,outorder , duplicate
receiving ack change send window


